name: Deploy to Cloudflare

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy"
        required: true
        default: "production"

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build frontend and worker
        run: |
          npm run build
          # Create worker script for Cloudflare Workers
          npx esbuild server/worker.ts --platform=neutral --packages=external --bundle --format=esm --outfile=terraform/worker.js
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.5.0'
      
      - name: Terraform Init
        run: |
          cd terraform
          terraform init
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      
      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          TF_VAR_cloudflare_account_id: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          TF_VAR_domain_zone_id: ${{ secrets.CLOUDFLARE_ZONE_ID }}
      
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'  # Only apply on main branch
        run: |
          cd terraform
          terraform apply -auto-approve
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          TF_VAR_cloudflare_account_id: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          TF_VAR_domain_zone_id: ${{ secrets.CLOUDFLARE_ZONE_ID }}
          
      - name: Run Database Migrations
        if: github.ref == 'refs/heads/main'  # Only run migrations on main branch
        run: |
          npx wrangler d1 execute CLOUDACCOUNT_DB --file=migrations/0000_initial_schema.sql
          npx wrangler d1 execute CLOUDACCOUNT_DB --file=migrations/0001_sample_data.sql
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}